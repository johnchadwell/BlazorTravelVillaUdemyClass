@inject IJSRuntime JSRun

<h3>DeleteComponent</h3>

<div>

</div>
<div class="modal fade" data-backdrop="static" data-keyword="false" id="deleteConfirmModal" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exampleModalLabel">Confirm Delete</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close" @onclick="HideDialog">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                Are you sure?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal" @onclick="HideDialog">
                    Cancel
                </button>
                @if (IsProcessing)
                {
                    <button class="btn btn-danger"><i class="fade fa-spin fa-spinner"></i>Processing...</button>
                }
                else
                {
                    <button type="button" class="btn btn-danger" @onclick="()=>OnConfirmationChanged(true)">
                        Delete
                    </button>
                }
            </div>
        </div>
    </div>
</div>


@code {
    public bool IsProcessing { get; set; } = false;
    [Parameter]
    public EventCallback<bool> ConfirmationChanged { get; set; }
    protected async Task OnConfirmationChanged(bool value)
    {
        if (value)
        {
            IsProcessing = true;
        }
        await ConfirmationChanged.InvokeAsync(value);
        Console.WriteLine("OnConfirmationChanged Complete");

        IsProcessing = false;

    }
    public async Task HideDialog()
    {
        await JSRun.InvokeVoidAsync("HideDeleteConfirmModal");
    }
}

